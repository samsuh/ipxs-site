{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samuel Suh\\\\Desktop\\\\ipxs-site\\\\components\\\\Form.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport reqwest from 'reqwest';\nconst {\n  string\n} = PropTypes;\nexport default class Rimp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonValue: props.buttonValue,\n      buttonStyles: props.buttonStyles,\n      containerStyles: props.containerStyles,\n      placeholder: props.placeholder,\n      inputStyles: props.inputStyles,\n      formWrapper: props.formWrapper,\n      labelText: props.labelText,\n      labelStyles: props.labelStyles,\n      formID: props.formID,\n      showLabel: props.showLabel,\n      completeMessage: props.completeMessage,\n      valid: false,\n      isTyping: false,\n      showError: props.showError,\n      helpText: props.helpText,\n      mailChimpUrl: props.mailChimpUrl,\n      submitted: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateEmail = this.validateEmail.bind(this);\n    this.returnStyles = this.returnStyles.bind(this);\n  }\n\n  static get defaultProps() {\n    return {\n      buttonValue: 'submit',\n      buttonStyles: 'button',\n      placeholder: 'enter your email address',\n      formWrapper: 'flex flex-justify-between flex-align-center',\n      containerStyles: 'newsletter__form',\n      completeMessage: 'Thanks for subscribing',\n      helpText: 'Please provide a valid email address',\n      labelText: 'Email address:',\n      labelStyles: 'newsletter__form--label',\n      formID: 'newsletter_email__input',\n      showLabel: false,\n      showError: true,\n      emailAddress: '',\n      mailChimpUrl: null\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let self = this;\n    let isValid = this.state.valid;\n\n    if (isValid) {\n      reqwest({\n        method: 'get',\n        type: 'jsonp',\n        contentType: 'application/json',\n        url: this.state.mailChimpUrl,\n        data: {\n          EMAIL: this.state.emailAddress,\n          STATUS: 'subscribed'\n        },\n        jsonpCallback: 'c'\n      }).then(function (resp) {\n        self.setState({\n          submitted: true\n        });\n      }).fail(function (err, msg) {\n        console.log(err);\n        self.setState({\n          submitted: true\n        });\n      }).always(function (resp) {\n        self.setState({\n          submitted: true\n        });\n      });\n      self.setState({\n        submitted: true\n      });\n    }\n  }\n\n  validateEmail(e) {\n    this.setState({\n      isTyping: true\n    });\n\n    function validateEmail(email) {\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(email);\n    }\n\n    if (validateEmail(e.currentTarget.value)) {\n      this.setState({\n        valid: true,\n        emailAddress: e.currentTarget.value\n      });\n    } else {\n      this.setState({\n        valid: false\n      });\n    }\n  }\n\n  returnStyles() {\n    let styles = `${this.state.containerStyles}`;\n\n    if (this.state.isTyping) {\n      styles += ` ${this.state.valid ? 'valid' : 'not-valid'}`;\n    }\n\n    return styles;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: this.returnStyles(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, !this.state.submitted ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: this.state.formWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.showLabel ? __jsx(\"label\", {\n      className: this.state.labelStyles,\n      htmlFor: this.state.formID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.state.labelText) : null, __jsx(\"input\", {\n      id: this.state.formID,\n      type: \"email\",\n      onChange: this.validateEmail,\n      ref: \"email\",\n      className: this.state.inputStyles,\n      placeholder: this.state.placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      className: this.state.buttonStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.buttonValue)), this.state.showError ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, !this.state.valid && this.state.isTyping ? __jsx(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.helpText) : null) : null) : __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.completeMessage));\n  }\n\n}\nRimp.propTypes = {\n  mailChimpUrl: string.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\Samuel Suh\\Desktop\\ipxs-site\\components\\Form.js"],"names":["React","Component","PropTypes","reqwest","string","Rimp","constructor","props","state","buttonValue","buttonStyles","containerStyles","placeholder","inputStyles","formWrapper","labelText","labelStyles","formID","showLabel","completeMessage","valid","isTyping","showError","helpText","mailChimpUrl","submitted","handleSubmit","bind","validateEmail","returnStyles","defaultProps","emailAddress","e","preventDefault","self","isValid","method","type","contentType","url","data","EMAIL","STATUS","jsonpCallback","then","resp","setState","fail","err","msg","console","log","always","email","re","test","currentTarget","value","styles","render","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport reqwest from 'reqwest'\r\n\r\nconst { string } = PropTypes\r\n\r\nexport default class Rimp extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      buttonValue: props.buttonValue,\r\n      buttonStyles: props.buttonStyles,\r\n      containerStyles: props.containerStyles,\r\n      placeholder: props.placeholder,\r\n      inputStyles: props.inputStyles,\r\n      formWrapper: props.formWrapper,\r\n      labelText: props.labelText,\r\n      labelStyles: props.labelStyles,\r\n      formID: props.formID,\r\n      showLabel: props.showLabel,\r\n      completeMessage: props.completeMessage,\r\n      valid: false,\r\n      isTyping: false,\r\n      showError: props.showError,\r\n      helpText: props.helpText,\r\n      mailChimpUrl: props.mailChimpUrl,\r\n      submitted: false\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.validateEmail = this.validateEmail.bind(this)\r\n    this.returnStyles = this.returnStyles.bind(this)\r\n  }\r\n\r\n  static get defaultProps () {\r\n    return {\r\n      buttonValue: 'submit',\r\n      buttonStyles: 'button',\r\n      placeholder: 'enter your email address',\r\n      formWrapper: 'flex flex-justify-between flex-align-center',\r\n      containerStyles: 'newsletter__form',\r\n      completeMessage: 'Thanks for subscribing',\r\n      helpText: 'Please provide a valid email address',\r\n      labelText: 'Email address:',\r\n      labelStyles: 'newsletter__form--label',\r\n      formID: 'newsletter_email__input',\r\n      showLabel: false,\r\n      showError: true,\r\n      emailAddress: '',\r\n      mailChimpUrl: null\r\n    }\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n    let self = this\r\n    let isValid = this.state.valid\r\n    if (isValid) {\r\n      reqwest({\r\n        method: 'get',\r\n        type: 'jsonp',\r\n        contentType: 'application/json',\r\n        url: this.state.mailChimpUrl,\r\n        data: {EMAIL: this.state.emailAddress, STATUS: 'subscribed'},\r\n        jsonpCallback: 'c'\r\n      })\r\n      .then(function (resp) {\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      .fail(function (err, msg) {\r\n        console.log(err)\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      .always(function (resp) {\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      self.setState({\r\n        submitted: true\r\n      })\r\n    }\r\n  }\r\n\r\n  validateEmail (e) {\r\n    this.setState({\r\n      isTyping: true\r\n    })\r\n    function validateEmail (email) {\r\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n      return re.test(email)\r\n    }\r\n    if (validateEmail(e.currentTarget.value)) {\r\n      this.setState({\r\n        valid: true,\r\n        emailAddress: e.currentTarget.value\r\n      })\r\n    } else {\r\n      this.setState({\r\n        valid: false\r\n      })\r\n    }\r\n  }\r\n\r\n  returnStyles () {\r\n    let styles = `${this.state.containerStyles}`\r\n    if (this.state.isTyping) {\r\n      styles += ` ${this.state.valid ? 'valid' : 'not-valid'}`\r\n    }\r\n    return styles\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className={this.returnStyles()}>\r\n        {!this.state.submitted\r\n          ? <div>\r\n            <form onSubmit={this.handleSubmit} className={this.state.formWrapper}>\r\n              {this.state.showLabel\r\n                ? <label className={this.state.labelStyles} htmlFor={this.state.formID} >{this.state.labelText}</label>\r\n                :null\r\n              }\r\n              <input id={this.state.formID} type='email' onChange={this.validateEmail} ref='email' className={this.state.inputStyles} placeholder={this.state.placeholder} />\r\n              <button className={this.state.buttonStyles}>{this.state.buttonValue}</button>\r\n            </form>\r\n            {this.state.showError\r\n              ? <div>\r\n                {!this.state.valid && this.state.isTyping\r\n                  ? <div className='error'>{this.state.helpText}</div>\r\n                : null}\r\n              </div>\r\n            : null}\r\n          </div>\r\n        : <p>{this.state.completeMessage}</p> }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRimp.propTypes = {\r\n  mailChimpUrl: string.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}