{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samuel Suh\\\\Desktop\\\\ipxs-site\\\\components\\\\Form.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport reqwest from 'reqwest';\nvar string = PropTypes.string;\n\nvar Rimp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Rimp, _Component);\n\n  function Rimp(props) {\n    var _this;\n\n    _classCallCheck(this, Rimp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rimp).call(this, props));\n    _this.state = {\n      buttonValue: props.buttonValue,\n      buttonStyles: props.buttonStyles,\n      containerStyles: props.containerStyles,\n      placeholder: props.placeholder,\n      inputStyles: props.inputStyles,\n      formWrapper: props.formWrapper,\n      labelText: props.labelText,\n      labelStyles: props.labelStyles,\n      formID: props.formID,\n      showLabel: props.showLabel,\n      completeMessage: props.completeMessage,\n      valid: false,\n      isTyping: false,\n      showError: props.showError,\n      helpText: props.helpText,\n      mailChimpUrl: props.mailChimpUrl,\n      submitted: false\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.validateEmail = _this.validateEmail.bind(_assertThisInitialized(_this));\n    _this.returnStyles = _this.returnStyles.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Rimp, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      var self = this;\n      var isValid = this.state.valid;\n\n      if (isValid) {\n        reqwest({\n          method: 'get',\n          type: 'jsonp',\n          contentType: 'application/json',\n          url: this.state.mailChimpUrl,\n          data: {\n            EMAIL: this.state.emailAddress,\n            STATUS: 'subscribed'\n          },\n          jsonpCallback: 'c'\n        }).then(function (resp) {\n          self.setState({\n            submitted: true\n          });\n        }).fail(function (err, msg) {\n          console.log(err);\n          self.setState({\n            submitted: true\n          });\n        }).always(function (resp) {\n          self.setState({\n            submitted: true\n          });\n        });\n        self.setState({\n          submitted: true\n        });\n      }\n    }\n  }, {\n    key: \"validateEmail\",\n    value: function validateEmail(e) {\n      this.setState({\n        isTyping: true\n      });\n\n      function validateEmail(email) {\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n      }\n\n      if (validateEmail(e.currentTarget.value)) {\n        this.setState({\n          valid: true,\n          emailAddress: e.currentTarget.value\n        });\n      } else {\n        this.setState({\n          valid: false\n        });\n      }\n    }\n  }, {\n    key: \"returnStyles\",\n    value: function returnStyles() {\n      var styles = \"\".concat(this.state.containerStyles);\n\n      if (this.state.isTyping) {\n        styles += \" \".concat(this.state.valid ? 'valid' : 'not-valid');\n      }\n\n      return styles;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: this.returnStyles(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, !this.state.submitted ? __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, __jsx(\"form\", {\n        onSubmit: this.handleSubmit,\n        className: this.state.formWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.showLabel ? __jsx(\"label\", {\n        className: this.state.labelStyles,\n        htmlFor: this.state.formID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, this.state.labelText) : null, __jsx(\"input\", {\n        id: this.state.formID,\n        type: \"email\",\n        onChange: this.validateEmail,\n        ref: \"email\",\n        className: this.state.inputStyles,\n        placeholder: this.state.placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        className: this.state.buttonStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.state.buttonValue)), this.state.showError ? __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, !this.state.valid && this.state.isTyping ? __jsx(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.state.helpText) : null) : null) : __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.completeMessage));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        buttonValue: 'submit',\n        buttonStyles: 'button',\n        placeholder: 'enter your email address',\n        formWrapper: 'flex flex-justify-between flex-align-center',\n        containerStyles: 'newsletter__form',\n        completeMessage: 'Thanks for subscribing',\n        helpText: 'Please provide a valid email address',\n        labelText: 'Email address:',\n        labelStyles: 'newsletter__form--label',\n        formID: 'newsletter_email__input',\n        showLabel: false,\n        showError: true,\n        emailAddress: '',\n        mailChimpUrl: null\n      };\n    }\n  }]);\n\n  return Rimp;\n}(Component);\n\nexport { Rimp as default };\nRimp.propTypes = {\n  mailChimpUrl: string.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\Samuel Suh\\Desktop\\ipxs-site\\components\\Form.js"],"names":["React","Component","PropTypes","reqwest","string","Rimp","props","state","buttonValue","buttonStyles","containerStyles","placeholder","inputStyles","formWrapper","labelText","labelStyles","formID","showLabel","completeMessage","valid","isTyping","showError","helpText","mailChimpUrl","submitted","handleSubmit","bind","validateEmail","returnStyles","e","preventDefault","self","isValid","method","type","contentType","url","data","EMAIL","emailAddress","STATUS","jsonpCallback","then","resp","setState","fail","err","msg","console","log","always","email","re","test","currentTarget","value","styles","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport reqwest from 'reqwest'\r\n\r\nconst { string } = PropTypes\r\n\r\nexport default class Rimp extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      buttonValue: props.buttonValue,\r\n      buttonStyles: props.buttonStyles,\r\n      containerStyles: props.containerStyles,\r\n      placeholder: props.placeholder,\r\n      inputStyles: props.inputStyles,\r\n      formWrapper: props.formWrapper,\r\n      labelText: props.labelText,\r\n      labelStyles: props.labelStyles,\r\n      formID: props.formID,\r\n      showLabel: props.showLabel,\r\n      completeMessage: props.completeMessage,\r\n      valid: false,\r\n      isTyping: false,\r\n      showError: props.showError,\r\n      helpText: props.helpText,\r\n      mailChimpUrl: props.mailChimpUrl,\r\n      submitted: false\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.validateEmail = this.validateEmail.bind(this)\r\n    this.returnStyles = this.returnStyles.bind(this)\r\n  }\r\n\r\n  static get defaultProps () {\r\n    return {\r\n      buttonValue: 'submit',\r\n      buttonStyles: 'button',\r\n      placeholder: 'enter your email address',\r\n      formWrapper: 'flex flex-justify-between flex-align-center',\r\n      containerStyles: 'newsletter__form',\r\n      completeMessage: 'Thanks for subscribing',\r\n      helpText: 'Please provide a valid email address',\r\n      labelText: 'Email address:',\r\n      labelStyles: 'newsletter__form--label',\r\n      formID: 'newsletter_email__input',\r\n      showLabel: false,\r\n      showError: true,\r\n      emailAddress: '',\r\n      mailChimpUrl: null\r\n    }\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n    let self = this\r\n    let isValid = this.state.valid\r\n    if (isValid) {\r\n      reqwest({\r\n        method: 'get',\r\n        type: 'jsonp',\r\n        contentType: 'application/json',\r\n        url: this.state.mailChimpUrl,\r\n        data: {EMAIL: this.state.emailAddress, STATUS: 'subscribed'},\r\n        jsonpCallback: 'c'\r\n      })\r\n      .then(function (resp) {\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      .fail(function (err, msg) {\r\n        console.log(err)\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      .always(function (resp) {\r\n        self.setState({\r\n          submitted: true\r\n        })\r\n      })\r\n      self.setState({\r\n        submitted: true\r\n      })\r\n    }\r\n  }\r\n\r\n  validateEmail (e) {\r\n    this.setState({\r\n      isTyping: true\r\n    })\r\n    function validateEmail (email) {\r\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n      return re.test(email)\r\n    }\r\n    if (validateEmail(e.currentTarget.value)) {\r\n      this.setState({\r\n        valid: true,\r\n        emailAddress: e.currentTarget.value\r\n      })\r\n    } else {\r\n      this.setState({\r\n        valid: false\r\n      })\r\n    }\r\n  }\r\n\r\n  returnStyles () {\r\n    let styles = `${this.state.containerStyles}`\r\n    if (this.state.isTyping) {\r\n      styles += ` ${this.state.valid ? 'valid' : 'not-valid'}`\r\n    }\r\n    return styles\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className={this.returnStyles()}>\r\n        {!this.state.submitted\r\n          ? <div>\r\n            <form onSubmit={this.handleSubmit} className={this.state.formWrapper}>\r\n              {this.state.showLabel\r\n                ? <label className={this.state.labelStyles} htmlFor={this.state.formID} >{this.state.labelText}</label>\r\n                :null\r\n              }\r\n              <input id={this.state.formID} type='email' onChange={this.validateEmail} ref='email' className={this.state.inputStyles} placeholder={this.state.placeholder} />\r\n              <button className={this.state.buttonStyles}>{this.state.buttonValue}</button>\r\n            </form>\r\n            {this.state.showError\r\n              ? <div>\r\n                {!this.state.valid && this.state.isTyping\r\n                  ? <div className='error'>{this.state.helpText}</div>\r\n                : null}\r\n              </div>\r\n            : null}\r\n          </div>\r\n        : <p>{this.state.completeMessage}</p> }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRimp.propTypes = {\r\n  mailChimpUrl: string.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}